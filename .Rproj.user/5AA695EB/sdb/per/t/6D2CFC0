{
    "collab_server" : "",
    "contents" : "# Project: GPSR shark MPA Project\n# Objective: Generate a GUI for users to investigate conservation priorities for sharks and rays\n# Species: All >1000 sharks and Rays\n# Developer: Ross Dwyer\n\nDateUpdated <-  \"10-Jan-2018\" ## Date last updated\n\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here: http://shiny.rstudio.com/\n\n\n# Load required packages\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(sp)\nlibrary(rgdal)\nlibrary(raster)\nlibrary(RColorBrewer)\n\nurl1 <- 'https://gist.githubusercontent.com/anonymous/2c69ab500bfa94d0268a/raw/example.txt'\n\nurl1 <- 'https://github.com/RossDwyer/SharkRay-MPA/blob/master/Data/Sharks%20and%20rays%20in%20EEZs.csv'\nurl2 <- ''\n\nlibrary(RCurl)\nlibrary(bitops)\ndf <- getURL(url, ssl.verifypeer=FALSE)\ndf1 <- read.delim(textConnection(df),header=TRUE, row.names=1,stringsAsFactors=FALSE)\n\n# Load data ----\nsharkdat <- read.csv(\"Data/datatable containing species names and IUCN categories.csv\")#[1:dim(specrast)[3],] # limited by the number of sharks loaded into the raster \nEEZ_spec <- read.csv(\"Data/Sharks and rays in EEZs.csv\")\nOceans_spec <- read.csv(\"Data/Sharks and rays in Oceans.csv\")\n\nload(\"myMPA.RData\") ##Loads GIS files: reduced.MPAs,allspecrast,worldmap,orderrast,iucnrast\n\n# tab 1 lookup table\norder.name <- c(\"CARCHARHINIFORMES\",\n                \"CHIMAERIFORMES\",\n                \"HETERODONTIFORMES\",\n                \"HEXANCHIFORMES\",\n                \"LAMNIFORMES\",\n                \"ORECTOLOBIFORMES\",\n                \"PRISTIOPHORIFORMES\",\n                \"RAJIFORMES\",\n                \"SQUALIFORMES\",\n                \"SQUATINIFORMES\")\ncleantable <- sharkdat\n\n# tab 2\nspecies.name <- sharkdat$binomial # Names of Species for the species range maps  \npal <- c(\"#253494\",\"#f93\") # HEX code for the colour of the raster and the MPAs\n\n#  tab 3 - For the order/IUCN category maps\niorder <- orderrast[[1]]\niCARCHARHINIFORMES <- orderrast[[2]]\niCHIMAERIFORMES <- orderrast[[3]]\niHETERODONTIFORMES <- orderrast[[4]]\niHEXANCHIFORMES <- orderrast[[5]]\niLAMNIFORMES <- orderrast[[6]]\niORECTOLOBIFORMES <- orderrast[[7]]\niPRISTIOPHORIFORMES <- orderrast[[8]]\niRAJIFORMES <- orderrast[[9]]\niSQUALIFORMES <- orderrast[[10]]\niSQUATINIFORMES <- orderrast[[11]]\n\nistatus <- iucnrast[[1]]\niCR <- iucnrast[[2]]\niEN <- iucnrast[[3]]\niNT <- iucnrast[[4]]\niVU <- iucnrast[[5]]\niLC <- iucnrast[[6]]\niDD <- iucnrast[[7]]\n\n# tab 4\nivis <- 40 # No EEZ/Oceans to visualise in the table\nsbarchart_colours <- rev(colorRampPalette(brewer.pal(9,\"Blues\")[-1])(ivis))\nEEZ_spec1 <- data.frame(EEZ_spec[order(EEZ_spec$Nospecies,decreasing=TRUE),][1:ivis,],row.names=NULL)\nOceans_spec1 <- data.frame(Oceans_spec[order(Oceans_spec$Nospecies,decreasing=TRUE),][1:ivis,],row.names=NULL)\n\nsEEZ_count <- data.frame(x=EEZ_spec1$Territory1,y=EEZ_spec1$Nospecies)\nsOceans_count <- data.frame(x=Oceans_spec1$name,y=Oceans_spec1$Nospecies)\n\n# tab 5 (About page)\nnoSpecies <- length(species.name) # number of species considered\n\n\n# User interface ----\n\nui <- navbarPage(\"GPSR shark MPA project\", \n                 id=\"nav\",\n                 \n                 \n                 ## TAB 1\n                 tabPanel(\"Data explorer\", \n                          fluidRow(\n                            column(3,\n                                   selectInput(\"order_name\", \"Order name\", c(\"Select order\"=\"\", structure(order.name, names=order.name)), multiple=TRUE)\n                            ),\n                            column(3,\n                                   conditionalPanel(\"input.order_name\",\n                                                    selectInput(\"family_nam\", \"Family name\", c(\"All families\"=\"\"), multiple=TRUE)\n                                   )\n                            ),\n                            column(3,\n                                   conditionalPanel(\"input.order_name\",\n                                                    selectInput(\"binomial\", \"Species name\", c(\"Select species\"=\"\"), multiple=TRUE)\n                                   )\n                            )\n                          ),\n                          fluidRow(\n                            column(6,\n                                   checkboxGroupInput(\"code\", \"Show IUCN listing\",\n                                                      choices = c(\n                                                        CR = \"CR\",\n                                                        EN = \"EN\", \n                                                        NT = \"NT\",\n                                                        VU = \"VU\",\n                                                        LC = \"LC\",\n                                                        DD = \"DD\"),\n                                                      selected = c(\"CR\",\"EN\",\"NT\",\"VU\",\"LC\",\"DD\")\n                                   )\n                            )\n                          ),\n                                   \n                          \n                          hr(),\n                          DT::dataTableOutput(\"mytable\")\n                 ),\n                 \n                 \n                 ## TAB 2\n                 tabPanel(\"Species map\",\n                          fluidRow(\n                            column(3,\n                                   selectInput(inputId =\"var2\", \n                                               label =\"Species name\", \n                                               choices = species.name))\n                            \n                          ),\n                          \n                          div(class=\"outer\",\n                              \n                              # taken from https://github.com/rstudio/shiny-examples/tree/master/063-superzip-example\n                              tags$head(\n                                # Include our custom CSS\n                                includeCSS(\"styles.css\"),\n                                includeScript(\"gomap.js\")\n                              ),\n                              \n                              \n                              #tags$style(type = \"text/css\", \"html, body {width:100%;height:100%}\"),\n                              leafletOutput(\"map2\", width = \"100%\", height = \"100%\")\n                              \n                              #DT::dataTableOutput(\"mytable\")\n                          )\n                 ),\n                 \n                 \n                 ## TAB 3\n                 tabPanel(\"Interactive map\",\n                          div(class=\"outer\",\n                              \n                              # taken from https://github.com/rstudio/shiny-examples/tree/master/063-superzip-example\n                              tags$head(\n                                # Include our custom CSS\n                                includeCSS(\"styles.css\"),\n                                includeScript(\"gomap.js\")\n                              ),\n                              \n                              #tags$style(type = \"text/css\", \"html, body {width:100%;height:100%}\"),\n                              leafletOutput(\"map\", width = \"100%\", height = \"100%\"),\n                              \n                              absolutePanel(top = 10, left = 50,\n                                            \n                                            radioButtons(\"layerOverlap\", \"Choose which layers to overlap:\",\n                                                         c(\"Taxonomic order\"= \"order\",\n                                                           \"IUCN listing\" = \"iucn\"),\n                                                         inline = TRUE),\n                                            \n                                            conditionalPanel(\n                                              condition = \"input.layerOverlap == 'order'\",\n                                              selectInput(\"var.order\", \n                                                          label = \"Choose the Taxonomic order to display\",\n                                                          choices = list(\"all\",\n                                                                         \"CARCHARHINIFORMES\",\n                                                                         \"CHIMAERIFORMES\",\n                                                                         \"HETERODONTIFORMES\",\n                                                                         \"HEXANCHIFORMES\",\n                                                                         \"LAMNIFORMES\",\n                                                                         \"ORECTOLOBIFORMES\",\n                                                                         \"PRISTIOPHORIFORMES\",\n                                                                         \"RAJIFORMES\",\n                                                                         \"SQUALIFORMES\",\n                                                                         \"SQUATINIFORMES\"),\n                                                          selected = \"all\"),\n                                              sliderInput(\"range1\",\n                                                          \"% species displayed :\",\n                                                          min = 0, max = 100, step = 10,  value = 90)\n                                            ),\n                                            \n                                            conditionalPanel(\n                                              condition = \"input.layerOverlap == 'iucn'\",\n                                              selectInput(\"var.iucn\", \n                                                          label = \"Choose the IUCN code to display\",\n                                                          choices = list(\"all\",\n                                                                         \"CR\",\n                                                                         \"EN\",\n                                                                         \"NT\",\n                                                                         \"VU\",\n                                                                         \"LC\",\n                                                                         \"DD\"),\n                                                          selected = \"all\"),\n                                              sliderInput(\"range2\",\n                                                          \"% species displayed :\",\n                                                          min = 0, max = 100, step = 10,  value = 90)\n                                              #checkboxInput(\"legend\", \"Show legend\", TRUE)\n                                            )\n                              )\n                          )\n                 ),\n                 \n                 \n                 ## TAB 4\n                 tabPanel(title=\"Interactive chart\",\n                          fluidPage(\n                            radioButtons(\"sAreaPolygons\", \"Choose which areas to visualise:\",\n                                         c(\"Exclusive Economic Zones\"= \"sEEZ_count\",\n                                           \"Oceans\" = \"sOceans_count\"),\n                                         inline = TRUE),\n                            hr(),\n                            plotlyOutput(\"plot\", width = \"100%\", height = \"100%\"),\n                            verbatimTextOutput(\"event\"))),\n                 \n\n                 ## TAB 5\n                 tabPanel(title=\"About\",\n                          tags$body(\n                            h4('This Shiny App was built to help visualise shark and ray distribution information across the globe.'),\n                            #br(),\n                            p(paste0(\"Our application contains range distribution information of \",noSpecies,\" shark and ray species downloaded from...\")),\n                            a(href = \"http://www.iucnredlist.org\",\"The IUCN Red List of Threatened Species\"),\n                           #a(href = \"https://scholar.google.com.au/citations?user=kPWHdWsAAAAJ&hl=en\", \"Click Here for more information about the author\"),\n                            br(),\n                            br(),\n                            p(\"Our application is powered by\")),\n                          tags$img(src = \"Rstudio_shiny.png\", width = \"80px\", height = \"80px\"),\n                          tags$img(src = \"Rstudio-Ball.png\", width = \"80px\", height = \"80px\"),\n                          br(),\n                          br(),\n                          br(),\n                          p(\"This application was built by Dr Ross Dwyer as part of the Global Partnership for Sharks and Rays project\"),\n                          p(paste0(\"Date last updated: \",DateUpdated))\n                          )\n          \n)\n\n\n# server logic required to draw the map ----\nserver <- function(input, output, session) {\n  \n  #### TAB 1: Data Explorer #### \n  \n  observe({\n    family_nam <- if (is.null(input$order_name)) character(0) else {\n      filter(cleantable, order_name %in% input$order_name) %>%\n        `$`('family_nam') %>%\n       unique() %>%\n        sort()\n    }\n    stillSelected <- isolate(input$family_nam[input$family_nam %in% family_nam])\n    updateSelectInput(session, \"family_nam\", choices = family_nam,\n                      selected = stillSelected)\n  })\n  \n  observe({\n    binomial <- if (is.null(input$order_name)) character(0) else {\n      cleantable %>%\n        filter(order_name %in% input$order_name,\n               is.null(input$family_nam) | family_nam %in% input$family_nam) %>%\n        `$`('binomial') %>%\n        unique() %>%\n        sort()\n    }\n    stillSelected <- isolate(input$binomial[input$binomial %in% binomial])\n    updateSelectInput(session, \"binomial\", choices = binomial,\n                      selected = stillSelected)\n  })\n  \n  ## Generated data explorer table\n  output$mytable <- DT::renderDataTable({\n    df <- cleantable %>%\n      filter(\n        is.null(input$order_name) | order_name %in% input$order_name,\n        is.null(input$family_nam) | family_nam %in% input$family_nam,\n        is.null(input$binomial) | binomial %in% input$binomial,\n        is.null(input$code)  | code %in% input$code\n\n      ) #%>%\n      #mutate(Action = paste('<a class=\"go-map\" href=\"\" data-lat=\"', Lat, '\" data-long=\"', Long, '\" data-zip=\"', \n      #                      Zipcode, '\"><i class=\"fa fa-crosshairs\"></i></a>', sep=\"\"))\n    #action <- DT::dataTableAjax(session, df)\n  })\n  \n  #DT::datatable(df, options = list(ajax = list(url = action)), escape = FALSE)\n  \n  \n  \n  #### TAB 2: Interactive map containing species distributions ####\n  \n  output$map2 <- renderLeaflet({\n    \n    leaflet() %>% \n      setView(lng = 0, lat = 0,  zoom = 2) %>% \n      addTiles(group = \"OSM (default)\") %>%\n      addPolygons(#layerId =\"layer1\",\n        data=reduced.MPAs,\n        fill = TRUE, stroke = TRUE, weight=3,\n        color = pal[2],\n        group = \"MPAs\") %>% \n      addLegend(colors = pal, \n                labels = c(\"Species distribution\",\"MPAs\")) %>%\n      # Layers control\n      addLayersControl(\n        overlayGroups = c(\"MPAs\"),\n        options = layersControlOptions(collapsed = FALSE))\n    \n  })\n\n    observeEvent(input$var2, { # update the map markers and view on map clicks\n    \n    x <- which(sharkdat$binomial == input$var2)     # Set which species to display\n    newdata <- allspecrast[[x]]\n    newdata[newdata <= 0] <- NA \n    proxy <- leafletProxy(\"map2\")\n\n      #clearShapes() %>%\n      #addProviderTiles(providers$Stamen.TonerLite, group = \"Toner Lite\") %>% #http://leaflet-extras.github.io/leaflet-providers/preview/\n      #addProviderTiles(\"Esri.WorldGrayCanvas\",options = providerTileOptions(minZoom=10, maxZoom=18))%>%\n\n    proxy %>% \n      addRasterImage(layerId =\"layer2\",\n                     newdata,\n                     colors=pal[1], opacity = 0.5,\n                     group = \"Species\") %>%\n      mapOptions(zoomToLimits = \"first\")\n      \n  })\n  \n  \n  \n  ####TAB 3: Interactive Map containing order AND iucn category #### \n  \n  output$map <- renderLeaflet({\n    \n    # select what order to visualise\n    if (input$layerOverlap == 'order'){\n      data <- switch(input$var.order, \n                     \"all\"= iorder,\n                     \"CARCHARHINIFORMES\" = iCARCHARHINIFORMES,\n                     \"CHIMAERIFORMES\" = iCHIMAERIFORMES,\n                     \"HETERODONTIFORMES\" = iHETERODONTIFORMES,\n                     \"HEXANCHIFORMES\" = iHEXANCHIFORMES,\n                     \"LAMNIFORMES\" = iLAMNIFORMES,\n                     \"ORECTOLOBIFORMES\" = iORECTOLOBIFORMES,\n                     \"PRISTIOPHORIFORMES\"= iPRISTIOPHORIFORMES,\n                     \"RAJIFORMES\"= iRAJIFORMES,\n                     \"SQUALIFORMES\" = iSQUALIFORMES,\n                     \"SQUATINIFORMES\" = iSQUATINIFORMES)\n      \n      scolours1 <- c(\"#e5f5e0\", \"#a1d99b\", \"#31a354\")\n      \n      # Standardise the display slider \n      maxVal <- maxValue(data)\n      minDisplay <- ((100-input$range1)/100) * maxVal   \n      \n      specrast_sel_sum <- data\n      specrast_sel_sum[specrast_sel_sum < minDisplay] <- NA \n      \n      pal <- colorNumeric(scolours1, \n                          values(specrast_sel_sum),\n                          na.color = \"transparent\")\n      \n    }\n    \n    # alternatively select what iucn category to visualise   \n    if (input$layerOverlap == 'iucn'){\n      data <- switch(input$var.iucn, \n                     \"all\"= istatus,\n                     \"CR\" = iCR,\n                     \"EN\" = iEN,\n                     \"NT\" = iNT,\n                     \"VU\" = iVU,\n                     \"LC\" = iLC,\n                     \"DD\" = iDD)\n      \n      scolours2 <- c(\"#fee0d2\", \"#fc9272\", \"#de2d26\")\n    \n      # Standardise the display slider \n      maxVal <- maxValue(data)\n      minDisplay <- ((100-input$range2)/100) * maxVal   \n      \n      specrast_sel_sum <- data\n      specrast_sel_sum[specrast_sel_sum < minDisplay] <- NA \n      \n      pal <- colorNumeric(scolours2, \n                          values(specrast_sel_sum),\n                          na.color = \"transparent\")\n      \n      }\n      \n      \n    leafletProxy(\"map\", data= specrast_sel_sum) %>% \n      addTiles() %>%\n      setView(lng = 0, lat = 0,  zoom = 2) %>%\n      addRasterImage(specrast_sel_sum, colors = pal, opacity = 0.7) %>%\n      addLegend(pal = pal, \n                values = values(data),\n                #                position = \"bottomright\",\n                title = \"No. species\")#%>%\n    #addPolygons(data=reduced.MPAs,\n    #            fill = TRUE, stroke = TRUE, weight=3,\n    #            color = \"#f93\")    \n  \n  })\n  \n  # Use a separate observer to recreate the legend as needed.\n  # observe({\n  #    proxy <- leafletProxy(\"map\", data = data)\n  \n  # Remove any existing legend, and only if the legend is\n  # enabled, create a new one.\n  #    proxy %>% clearControls()\n  #    if (input$legend) {\n  \n  #     proxy %>% addLegend(position = \"bottomright\",\n  #                        pal = pal, values = ~specrast_sel_sum\n  #)}\n  #})\n  \n  ####TAB 4:  Interactive Plot containing species counts ####\n    \n  #v <- reactiveValues(data = NULL)\n\n  output$plot <- renderPlotly({\n    \n    # select what data to visualise\n    if (input$sAreaPolygons == 'sEEZ_count')\n      data1 <- sEEZ_count\n    \n    if (input$sAreaPolygons == 'sOceans_count')\n      data1 <- sOceans_count\n    \n    #data1 <- v$data \n    data1$x <- factor(data1$x, levels = data1$x[order(data1$y,decreasing =TRUE)])\n    row.names(data1) <- NULL\n    \n    plot_ly(data1, \n            x = ~x, y = ~y, \n            type = 'bar',\n            marker = list(color = sbarchart_colours),\n            height = 600, width = 900,\n            hoverinfo = 'text',\n            text = ~paste('<b>',x,'</b>',\n                          '<br> Species number: ', y)) %>%\n      layout(title = \"Number of Shark and Ray Species Present\",\n             xaxis = list(title = \"\",\n                          tickangle = 45,\n                          zeroline = FALSE,\n                          showline = FALSE,\n                          #showticklabels = FALSE,\n                          showgrid = FALSE),\n             yaxis = list(title = \"Number of Species\"),\n             margin = list(l = 50, r = 50, b = 150, t = 50, pad = 4))\n  })\n  \n  \n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1515635702236.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3206522962",
    "id" : "6D2CFC0",
    "lastKnownWriteTime" : 1515635901,
    "last_content_update" : 1515635901526,
    "path" : "~/Documents/github files/SharkRay MPA/app 2.R",
    "project_path" : "app 2.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}